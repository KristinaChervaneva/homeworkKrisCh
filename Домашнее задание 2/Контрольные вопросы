'''
1. Что такое git и чем он отличается от GitHub?
Git - это децентрализованная система контроля версий (СКВ). Она позволяет отслеживать изменения в проекте и синхронизует
его с основной версией проекта. Система хранит историю изменений и все правки по проекту. Разработчик создает свой
локальный репозиторий, в котором может работать с нужным файлом. После завершения работы с ним человек может загрузить
изменеия в основной проект. В свою очередь Github - это веб-сервис, который поставляет возможность удаленного репозитория.

2. Зачем использовать git и подобные ему системы в больших проектах?
СКВ сохраняет все версии проекта, что способствует контролю за изменениями. Если в большом проекте в каком-то месте нашли
баг, то с помощью git можно вернуться к той версии проекта, где ве работало, и найти ошибку.

3. Какие основные термины используются при работе с git?
clone - создание локального репозитория
commit - локальное сохранение изменений
push - загрузка изменений в удаленный репозиторий
pull - подтягивание изменений из удаленного репозитория на локальный
discard - сбросить изменения

4. В каких случаях имеет смысл создавать различные ветки проекта?
Пусть имеется программа, пусть мы поняли, что в ней есть проблема, но не знаем где конкретно. Чтобы правильно найти баг,
нужно использовать ветки. Т.е. есть главная (main) ветка проекта, мы создаем ветку багов (bugs_der)? Далее проверяем
каждый commit (локальное сохранение) на баги. После того как мы нашли проблему, делаем слияние ветки багов с главной веткой.

5. В чем отличия merge и rebase? В чем преимущества и недостатки последнего из них?
Merge - слияние, rebase - перебазирование. По сути они делают одно и то же: переносят commitы из одной ветки в другую, но
делают они это по-разному. Merge сохраняет реальную историю изменений, с помощью него можно легко определить кто и в какое
время сохранил какие-то изменеия. Но у этого способа есть недостаток: если одновременно на нескольких ветках работают люди,
то посмотрев на всю историю commitов можно запутаться. Плюс rebase в том, что идейно мы не теряем наши изменения и общая
картина истории проекта выглядит не запутанно. Но большой минус в том, что мы теряем реальную историю разработки и не
сможем определить кто и когда добавил изменения.

6. В чем отличия централизованных СКВ от децентрализованных?
Централизованная СКВ: хранит файлы в актуальном состоянии, хранит историю изменений. Есть "сервер", он отвечает за всю
синхронизацию. С ним в постоянном контакте находятся разные версии одного файла и главный файл обновляется все время.
Как пример гугл-документы.
Децентрализованная СКВ: никто не является главным, у каждого есть своя локальная копия файла, если сервер отключат, то
можно продолжать работать со своей копией файла. Удаленный и локальные репозитории связаны и могут быть синхронизированны
друг с другом.

'''